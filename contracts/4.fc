{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
int slice_bits(slice s) asm "SBITS";

() recv_internal() {
}

(cell) solve(int shift, cell text) {
  builder res = begin_cell().store_uint(0, 32);
  slice s = text.begin_parse();
  s~skip_bits(32);

  while(s.slice_bits() >= 8){
    int x = s~load_uint(8);
    if (x >= 65) & (x <= 90){
      x = (x - 65 + shift) % 26 + 65;
    } elseif (x >= 97) & (x <= 122){
      x = (x - 97 + shift) % 26 + 97;
    }
    res.store_uint(x, 8);
  }

  tuple stack = null();
  stack~push_back(res);

  while (~ s.slice_refs_empty?()){
    builder b = begin_cell();
    while(s.slice_bits() >= 8){
      int x = s~load_uint(8);
      if (x >= 65) & (x <= 90){
        x = (x - 65 + shift) % 26 + 65;
      } elseif (x >= 97) & (x <= 122){
        x = (x - 97 + shift) % 26 + 97;
      }
      b.store_uint(x, 8);
    }
    stack~push_back(b);
    cell v = s~load_ref(); 
    s = v.begin_parse();
  }

  cell a = stack~pop_back().end_cell();

  while (~ stack.is_null()) {
    a = stack~pop_back().store_ref(a).end_cell();
  }

  return a;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  shift %= 26;
  if (shift == 0){
    return text;
  }
  return solve(shift,text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  shift %= 26;
  if (shift == 0){
    return text;
  }

  return solve(26 - shift,text);
}