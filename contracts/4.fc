{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
int slice_bits(slice s) asm "SBITS";



(cell) solve(int shift, cell text) {
  builder res = begin_cell().store_uint(0, 32);
  slice s = text.begin_parse();
  s~skip_bits(32);
  tuple tmp = empty_tuple();
  int i = 0;
  int f? = true;
  repeat(65){
    tmp~tpush(i);
    i += 1;
  }
  repeat(26){
    tmp~tpush((i - 65 + shift) % 26 + 65);
    i += 1;
  }
  repeat(6){
    tmp~tpush(i);
    i += 1;
  }
  repeat(26){
    tmp~tpush((i - 97 + shift) % 26 + 97);
    i += 1;
  }
  repeat(132){
    tmp~tpush(i);
    i += 1;
  }
  
  tuple stack = null();

  while (f?){ 
    repeat(s.slice_bits() / 8){
      int x = s~load_uint(8);
      x = tmp.at(x);
      res~store_uint(x, 8);
    }
    if (~ s.slice_refs_empty?()){
      f? = false;
    } else {
      s = s~load_ref().begin_parse();
    }
    res = begin_cell();
    stack~push_back(res);
  }
  cell a = stack~pop_back().end_cell();

  while (~ stack.is_null()) {
    a = stack~pop_back().store_ref(a).end_cell();
  }

  return a;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  shift %= 26;
  if (shift == 0){
    return text;
  }
  return solve(shift,text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  shift %= 26;
  if (shift == 0){
    return text;
  }

  return solve(26 - shift,text);
}