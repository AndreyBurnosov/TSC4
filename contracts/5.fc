{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {

}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  
  int first_f = 0;
  int second_f = 1;
  tuple res = empty_tuple();
  if (k == 0){
    return res;
  }
  if (n == 0){
    res~tpush(0);
    n += 1;
    k -= 1;
  }

  repeat(n / 10){
    (first_f, second_f) = (first_f * 34 + second_f * 55, first_f * 55 + second_f * 89);
  }

  n %= 10;
  
  if (n == 1){
    (first_f, second_f) = (second_f - first_f, first_f);
  }

  repeat(n - 2) {
    (first_f, second_f) = (second_f, first_f + second_f);
  }

  repeat(k) {
    (first_f, second_f) = (second_f, first_f + second_f);
    res~tpush(second_f);
  }

  return res;
}
